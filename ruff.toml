# STARTER FILE TAKEN FROM: https://docs.astral.sh/ruff/configuration/ (stolen from Russ Warren)

# Exclude a variety of commonly ignored directories.
# for default values see:
# https://docs.astral.sh/ruff/settings/#exclude
# it also excludes anything in your `.gitignore` file
extend-exclude = [
    ".pyenv",
]

extend-include = ["*.ipynb"]
line-length = 150 # we want longer lines than black default
indent-width = 4
target-version = "py311"

[lint]
# Approach taken here is to enable ALL and disable warnings we don't like...
#  - this means that new "bad" warnings can creep in... pin the ruff version if this is a concern
select = [
    "ALL",
]

ignore = [
    # FIX items
    #  - comment these out to bring FIXME and TODO to attention (or just search)
    "FIX001",  # Identify general FIXME items (uncomment this to only see "real" issues")
    "FIX002",  # Identify general TODO items (uncomment this to only see "real" issues")
    "FIX004",  # fixme-comment  (allows using `# FIXME` comments)

    # Style Guide items
    # "PTH",     # Uncomment this if you don't want to force pathlib use

    # Uncomment if you want to allow non-snake_case
    # "N802",    # function name should be lowercase (allows other than snake_case)
    # "N803",    # argument name should be lowercase (allows other than snake_case)
    # "N806",    # variable in function should be lowercase (allows other than snake_case)
    # "N815",    # mixedCase variable in class scope (allows other than snake_case)
    # "N816",    # mixedCase variable in global scope (allows other than snake_case)
    # "N817",    # allow CamelCase import as ALLCAPS acronym
    # "N999",    # invalid-module-name (allows non-snake_case module names, like for SomeClass.py)

    # Outright module removals...
    "BLE",     # Remove checking for blind exceptions (`except Exception` has its place!)

    # `flake8-annotations` stuff
    "ANN101",  # Missing type annotation for self in method  (is deprecated anyway)
    "ANN102",  # Missing type annotation for cls in classmethod  (is deprecated anyway)
    "ANN204",  # missing-return-type-special-method
    "ANN401",  # any-type  (allows use of `Any`... although use sparingly!)

    # `pydocstyle` stuff
    "D100",    # Missing docstring in public module
    "D104",    # Missing docstring in public package
    "D105",    # Missing docstring in magic method
    "D107",    # Missing docstring in __init__
    "D203",    # blank-line-before-class 
    "D204",    # 1 blank line required after class docstring
    "D212",    # multi-line-summary-first-line

    # `pycodestyle` stuff
    "E701",    # multiple statements on one line (colon)

    # `flake8-todos` stuff
    "TD001",   # invalid todo tag -- allows FIXME
    "TD002",   # invalid TODO author -- no need to put a person in a TODO (!!)
    "TD003",   # missing issue link below TODO
    "TD004",   # missing colon in TODO
    "TD005",   # missing-todo-description

    # Misc suppressions...
    "C408",    # unnecessary-collection-call -- allows dict(a=1, b=2) instead of {"a": 1, "b": 2}
    "EM101",   # raw-string-in-exception -- allows using raw strings in exceptions
    "FBT002",  # boolean-default-value-positional-argument
    "PD901",   # allow use of generic `df` for pandas DataFrames
    "PIE790",  # unnecessary-placeholder -- allows random `pass` statements (and ...)
    "PLR0913", # too-many-arguments -- allows more than 5 arguments in a function
    "RET504",  # unnecessary-assign -- allows var assign preceding return (useful for debugging)
    "S101",    # allow use of assert statements
    "SIM108",  # if-else-block-instead-of-if-exp -- stops suggesting ternary operators
    "T201",    # allow the use of the print() function
    "TRY003",  # raise-vanilla-args -- allows passing long strings to Exception constructor
    "UP015",   # redundant-open-modes -- allows explicit open(fpath, "r") instead of open(fpath)
    "PLW2901", # redefined-loop-name -- allows reusing loop variable names
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

pylint.max-statements = 100

[lint.per-file-ignores]
"tests/**/*.py" = [
    "ARG", # Unused function args -> fixtures nevertheless are functionally relevant...
    "FBT", # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    "PLR2004", # Magic value used in comparison, ...
]

[lint.mccabe]
max-complexity = 15  # 10 is the default, which is nice... but annoying

[lint.isort]
force-single-line = false
lines-after-imports = 2

[format]
quote-style = "double" # Like Black, use double quotes for strings.
indent-style = "space" # Like Black, indent with spaces, rather than tabs.
skip-magic-trailing-comma = false # Like Black, respect magic trailing commas.
line-ending = "auto" # Like Black, automatically detect the appropriate line ending.

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
